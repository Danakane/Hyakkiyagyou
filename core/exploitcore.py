import typing
import copy
from abc import ABCMeta, abstractmethod

from core import payloadcore
from core import factory


class Exploit:

    __metaclass__ = ABCMeta
    AUTHOR: str = "Danakane"
    PAYLOADSREGISTER: factory.PayloadFactory = None
    SHELLREGISTER: factory.PayloadFactory = None
    SCRIPTERREGISTER: factory.PayloadFactory = None

    def __init__(self) -> None:
        self.__exploitsize__: int = 0
        self.__payload__: typing.Optional[payloadcore.Payload] = None
        self.__exploitbin__: bytes = b""
        self.__compatibleploads__: typing.List[str] = []
        self.__targets__: typing.List[str] = []
        self.__target__: str = ""
        self.__parameters__: typing.Dict[str, str] = {}
        self.__configure__: typing.Callable = lambda **kwargs: None

    @property
    def size(self) -> int:
        return self.__exploitsize__

    @property
    def payload(self) -> payloadcore.Payload:
        return self.__payload__

    @payload.setter
    def payload(self, pload: payloadcore.Payload) -> None:
        self.__payload__ = pload

    @property
    def payloadraw(self) -> bytes:
        raw: bytes = b""
        if self.__payload__:
            raw = self.__payload__.raw
        return raw

    @property
    def comploads(self) -> typing.List[str]:
        return self.__compatibleploads__

    @property
    def target(self) -> str:
        return self.__target__

    @target.setter
    def target(self, tgt: str) -> None:
        self.__target__ = tgt

    @property
    def targets(self) -> typing.List[str]:
        return self.__targets__

    @property
    def parameters(self) -> typing.Dict[str, str]:
        return self.__parameters__

    @property
    def configure(self) -> typing.Callable:
        return self.__configure__

    @configure.setter
    def configure(self, configfct: typing.Callable) -> None:
        self.__configure__ = configfct

    def clone(self) -> "Exploit":
        return copy.deepcopy(self)

    def binary(self) -> bytes:
        return self.__exploitbin__

    def customize(self, compatibleploads: typing.List[str], targets: typing.List[str],
                  parameters: typing.Dict[str, str]) -> None:
        self.__exploitsize__ = 0
        self.__payload__ = None
        self.__exploitbin__ = b""
        self.__compatibleploads__ = compatibleploads
        self.__targets__ = targets
        self.__parameters__ = parameters

    def generate(self, payload: payloadcore.Payload, kwargs: typing.Dict[str, str]) -> "Exploit":
        exploit = copy.deepcopy(self)
        exploit.payload = payload
        exploit.configure(**kwargs)
        return exploit

    @abstractmethod
    def run(self) -> typing.Any:
        pass
