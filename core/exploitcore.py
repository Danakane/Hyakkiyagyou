import typing
import copy
import random
import string
from abc import ABCMeta, abstractmethod

from pytoolcore import exception
from core import payloadcore


class Exploit:

    __metaclass__ = ABCMeta

    def __init__(self, ref: str = "", compatibleploads: typing.List[str] = None)->None:
        if not ref:
            ref = "exploit_" + "".join(random.choices(string.ascii_lowercase + string.digits, k=16))
        self.__ref__ = ref
        self.__exploitsize__: int = 0
        self.__payload__: payloadcore.Payload = None
        self.__exploitbin__: bytes = b""
        if not compatibleploads:
            compatibleploads: typing.List[str] = []
        self.__compatibleploads__: typing.List[str] = compatibleploads

    def getref(self)->str:
        return self.__ref__

    def getsize(self)->int:
        return self.__exploitsize__

    def setpayload(self, payload: payloadcore.Payload)->None:
        if payload.getref() in self.__compatibleploads__:
            self.__payload__ = payload
        else:
            raise exception.CException("Unsupported type of payload")

    def getpayload(self)-> payloadcore.Payload:
        return self.__payload__

    def getpayloadbin(self)->bytes:
        return self.__payload__.binary()

    def getcomploads(self)->typing.List[str]:
        return self.__compatibleploads__

    def clone(self):
        return copy.deepcopy(self)

    def generate(self, payload: payloadcore.Payload):
        exploit = copy.deepcopy(self)
        exploit.setpayload(payload)
        return exploit

    @abstractmethod
    def run(self, rsockaddr: typing.Tuple[typing.Any, ...])->None:
        # rsockaddr is a tuple obtained
        # from netutils.getsockaddr()
        # and that fit tcp socket bind()/connect()
        # regardless of the socket type
        pass

    def binary(self)->bytes:
        return self.__exploitbin__

    ref = property(getref)
    size = property(getsize)
    payload = property(getpayload, setpayload)
    payloadbin = property(getpayloadbin)
    comploads = property(getcomploads)
